global readonly auto map = proc<elemType>(array<elemType> a, proc<elemType, elemType> transform) return array<elemType> {
	array<elemType> output = new elemType[#a];
	int i = 0;
	while(i < #output) {
		output[i] = transform(a[i]);
		i = i + 1;
	}
	return output;
};

global readonly auto reduce = proc<elemType>(array<elemType> a, proc<elemType, elemType, elemType> transform, elemType init) return array<elemType> {
	array<elemType> output = new elemType[#a + 1];
	output[0] = init;
	int i = 0;
	while(i < #a) {
		output[i + 1] = transform(output[i], a[i]);
		i = i + 1;
	}
	return output;
};

global readonly auto filter = proc<elemType>(array<elemType> a, proc<bool, elemType> keepFunc) return array<elemType> {
	array<bool> keep_flags = new bool[#a];
	int kept_elems = 0;

	int i = 0;
	while(i < #a) {
		if(keep_flags[i] = keepFunc(a[i])) {
			kept_elems = kept_elems + 1;
		}
		i = i + 1;
	}

	array<elemType> output = new elemType[kept_elems];
	i = 0;
	int k = 0;
	while(i < #a) {
		if(keep_flags[i]) {
			output[k] = a[i];
			k = k + 1;
		}
		i = i + 1;
	}
	return output;
};