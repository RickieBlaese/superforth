global auto map = proc (array<typearg elemType> a, proc<typearg elemType, typearg elemType> func) return array<typearg elemType> {
	array<typearg elemType> output = new typearg elemType[#a];
	int i = 0;
	while(i < #a) {
		output[i] = func(a[i]);
		i = i + 1;
	}
	return output;
};

global auto reduce = proc (array<typearg elemType> a, proc<typearg elemType, typearg elemType, typearg elemType> func, typearg elemType init) return array<typearg elemType> {
	array<typearg elemType> output = new typearg elemType[#a + 1];
	output[0] = init;
	int i = 0;
	while(i < #a) {
		output[i + 1] = func(output[i], a[i]);
		i = i + 1;
	}
	return output;
};

global auto filter = proc (array<typearg elemType> a, proc<bool, typearg elemType> func) return array<typearg elemType>{
	array<bool> keep_flags = new bool[#a];
	int kept_elems = 0;

	int i = 0;
	while(i < #a) {
		keep_flags[i] = func(a[i]);
		if(keep_flags[i]) {
			kept_elems = kept_elems + 1;
		}
		i = i + 1;
	}

	array<typearg elemType> output = new typearg elemType[kept_elems];
	i = 0;
	int k = 0;
	while(i < #a) {
		if(keep_flags[i]){
			output[k] = a[i];
			k = k + 1;
		}
		i = i + 1;
	}
	return output;
};

global auto forall = proc (array<typearg elemType> a, proc<nothing, typearg elemType> func) return nothing {
	int i = 0;
	while(i < #a) {
		func(a[i]);
		i = i + 1;
	}
	return;
};

global auto range = proc (int start, int stop, int step) return array<int> {
	array<int> range = new int[(stop - start) / step];
	int i = 0;
	while(i < #range) {
		range[i] = start + step * i;
		i = i + 1;
	}
	return range;
};